// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  projects      Project[]       @relation("ProjectOwner")
  collaborations ProjectUser[]
  assignedTasks Task[]          @relation("TaskAssignee")
  emailLogs     EmailLog[]
  passwordResetTokens PasswordResetToken[]
  sentInvitations PendingInvitation[] @relation("InvitationSender")
}

// Project model
model Project {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownerId   String
  owner     User          @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  tasks     Task[]
  collaborators ProjectUser[]
  pendingInvitations PendingInvitation[]

  @@index([ownerId])
}

// Task model
model Task {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  status      String   // "To Do", "In Progress", "Blocked", "Done"
  priority    String   // "Low", "Medium", "High", "Urgent"
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assigneeId  String?
  assignee    User?    @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)

  @@index([projectId])
  @@index([assigneeId])
}

// Join table for project collaborators
model ProjectUser {
  id        String   @id @default(cuid())
  role      String   // "OWNER", "COLLABORATOR"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

// Auth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Model for pending invitations to non-existent users
model PendingInvitation {
  id          String   @id @default(cuid())
  email       String
  token       String   @unique
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  
  // Relations
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  inviterId   String
  inviter     User     @relation("InvitationSender", fields: [inviterId], references: [id], onDelete: Cascade)
  
  // Ensure we don't have duplicate invitations for the same email and project
  @@unique([email, projectId])
  @@index([projectId])
  @@index([inviterId])
  @@index([token])
  @@index([email])
}

// Email logging model
model EmailLog {
  id          String   @id @default(cuid())
  type        String   // Type of email: "VERIFICATION", "PASSWORD_RESET", "INVITATION", "TASK_ASSIGNMENT", etc.
  sender      String   // Sender email address
  recipient   String   // Recipient email address
  subject     String   // Email subject
  status      String   // "SUCCESS", "FAILED"
  errorMessage String? @db.Text // Error message if status is "FAILED"
  metadata    Json?    // Additional metadata about the email (tags, etc.)
  createdAt   DateTime @default(now())
  
  // Optional relations
  userId      String?  // User who triggered the email (if applicable)
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([userId])
}
